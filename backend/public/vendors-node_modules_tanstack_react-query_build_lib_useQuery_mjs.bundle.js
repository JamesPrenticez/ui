"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([["vendors-node_modules_tanstack_react-query_build_lib_useQuery_mjs"],{"./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js":(e,t,r)=>{(function(){"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var e=r("./node_modules/react/index.js"),s=e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function n(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];i("error",e,r)}function i(e,t,r){var n=s.ReactDebugCurrentFrame.getStackAddendum();""!==n&&(t+="%s",r=r.concat([n]));var i=r.map((function(e){return String(e)}));i.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,i)}var o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},u=e.useState,a=e.useEffect,l=e.useLayoutEffect,c=e.useDebugValue,d=!1,h=!1;function y(e){var t=e.getSnapshot,r=e.value;try{var s=t();return!o(r,s)}catch(e){return!0}}var p=!!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement)?function(e,t,r){return t()}:function(t,r,s){d||void 0!==e.startTransition&&(d=!0,n("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));var i=r();if(!h){var p=r();o(i,p)||(n("The result of getSnapshot should be cached to avoid an infinite loop"),h=!0)}var f=u({inst:{value:i,getSnapshot:r}}),m=f[0].inst,b=f[1];return l((function(){m.value=i,m.getSnapshot=r,y(m)&&b({inst:m})}),[t,i,r]),a((function(){y(m)&&b({inst:m});return t((function(){y(m)&&b({inst:m})}))}),[t]),c(i),i},f=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:p;t.useSyncExternalStore=f,"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)})()},"./node_modules/use-sync-external-store/shim/index.js":(e,t,r)=>{e.exports=r("./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js")},"./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs":(e,t,r)=>{r.r(t),r.d(t,{QueryObserver:()=>a});var s=r("./node_modules/@tanstack/query-core/build/lib/utils.mjs"),n=r("./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs"),i=r("./node_modules/@tanstack/query-core/build/lib/focusManager.mjs"),o=r("./node_modules/@tanstack/query-core/build/lib/subscribable.mjs"),u=r("./node_modules/@tanstack/query-core/build/lib/retryer.mjs");class a extends o.Subscribable{constructor(e,t){super(),this.client=e,this.options=t,this.trackedProps=new Set,this.selectError=null,this.bindMethods(),this.setOptions(t)}bindMethods(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)}onSubscribe(){1===this.listeners.length&&(this.currentQuery.addObserver(this),l(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())}onUnsubscribe(){this.listeners.length||this.destroy()}shouldFetchOnReconnect(){return c(this.currentQuery,this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return c(this.currentQuery,this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=[],this.clearStaleTimeout(),this.clearRefetchInterval(),this.currentQuery.removeObserver(this)}setOptions(e,t){const r=this.options,n=this.currentQuery;if(this.options=this.client.defaultQueryOptions(e),void 0!==(null==e?void 0:e.isDataEqual)&&this.client.getLogger().error("The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option"),(0,s.shallowEqualObjects)(r,this.options)||this.client.getQueryCache().notify({type:"observerOptionsUpdated",query:this.currentQuery,observer:this}),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled)throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=r.queryKey),this.updateQuery();const i=this.hasListeners();i&&d(this.currentQuery,n,this.options,r)&&this.executeFetch(),this.updateResult(t),!i||this.currentQuery===n&&this.options.enabled===r.enabled&&this.options.staleTime===r.staleTime||this.updateStaleTimeout();const o=this.computeRefetchInterval();!i||this.currentQuery===n&&this.options.enabled===r.enabled&&o===this.currentRefetchInterval||this.updateRefetchInterval(o)}getOptimisticResult(e){const t=this.client.getQueryCache().build(this.client,e);return this.createResult(t,e)}getCurrentResult(){return this.currentResult}trackResult(e){const t={};return Object.keys(e).forEach((r=>{Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:()=>(this.trackedProps.add(r),e[r])})})),t}getCurrentQuery(){return this.currentQuery}remove(){this.client.getQueryCache().remove(this.currentQuery)}refetch({refetchPage:e,...t}={}){return this.fetch({...t,meta:{refetchPage:e}})}fetchOptimistic(e){const t=this.client.defaultQueryOptions(e),r=this.client.getQueryCache().build(this.client,t);return r.isFetchingOptimistic=!0,r.fetch().then((()=>this.createResult(r,t)))}fetch(e){var t;return this.executeFetch({...e,cancelRefetch:null==(t=e.cancelRefetch)||t}).then((()=>(this.updateResult(),this.currentResult)))}executeFetch(e){this.updateQuery();let t=this.currentQuery.fetch(this.options,e);return null!=e&&e.throwOnError||(t=t.catch(s.noop)),t}updateStaleTimeout(){if(this.clearStaleTimeout(),s.isServer||this.currentResult.isStale||!(0,s.isValidTimeout)(this.options.staleTime))return;const e=(0,s.timeUntilStale)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((()=>{this.currentResult.isStale||this.updateResult()}),e)}computeRefetchInterval(){var e;return"function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.currentResult.data,this.currentQuery):null!=(e=this.options.refetchInterval)&&e}updateRefetchInterval(e){this.clearRefetchInterval(),this.currentRefetchInterval=e,!s.isServer&&!1!==this.options.enabled&&(0,s.isValidTimeout)(this.currentRefetchInterval)&&0!==this.currentRefetchInterval&&(this.refetchIntervalId=setInterval((()=>{(this.options.refetchIntervalInBackground||i.focusManager.isFocused())&&this.executeFetch()}),this.currentRefetchInterval))}updateTimers(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())}clearStaleTimeout(){this.staleTimeoutId&&(clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0)}clearRefetchInterval(){this.refetchIntervalId&&(clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0)}createResult(e,t){const r=this.currentQuery,n=this.options,i=this.currentResult,o=this.currentResultState,a=this.currentResultOptions,c=e!==r,y=c?e.state:this.currentQueryInitialState,p=c?this.currentResult:this.previousQueryResult,{state:f}=e;let m,{dataUpdatedAt:b,error:v,errorUpdatedAt:R,fetchStatus:_,status:S}=f,g=!1,E=!1;if(t._optimisticResults){const s=this.hasListeners(),i=!s&&l(e,t),o=s&&d(e,r,t,n);(i||o)&&(_=(0,u.canFetch)(e.options.networkMode)?"fetching":"paused",b||(S="loading")),"isRestoring"===t._optimisticResults&&(_="idle")}if(t.keepPreviousData&&!f.dataUpdatedAt&&null!=p&&p.isSuccess&&"error"!==S)m=p.data,b=p.dataUpdatedAt,S=p.status,g=!0;else if(t.select&&void 0!==f.data)if(i&&f.data===(null==o?void 0:o.data)&&t.select===this.selectFn)m=this.selectResult;else try{this.selectFn=t.select,m=t.select(f.data),m=(0,s.replaceData)(null==i?void 0:i.data,m,t),this.selectResult=m,this.selectError=null}catch(e){this.client.getLogger().error(e),this.selectError=e}else m=f.data;if(void 0!==t.placeholderData&&void 0===m&&"loading"===S){let e;if(null!=i&&i.isPlaceholderData&&t.placeholderData===(null==a?void 0:a.placeholderData))e=i.data;else if(e="function"==typeof t.placeholderData?t.placeholderData():t.placeholderData,t.select&&void 0!==e)try{e=t.select(e),this.selectError=null}catch(e){this.client.getLogger().error(e),this.selectError=e}void 0!==e&&(S="success",m=(0,s.replaceData)(null==i?void 0:i.data,e,t),E=!0)}this.selectError&&(v=this.selectError,m=this.selectResult,R=Date.now(),S="error");const O="fetching"===_,Q="loading"===S,T="error"===S;return{status:S,fetchStatus:_,isLoading:Q,isSuccess:"success"===S,isError:T,isInitialLoading:Q&&O,data:m,dataUpdatedAt:b,error:v,errorUpdatedAt:R,failureCount:f.fetchFailureCount,failureReason:f.fetchFailureReason,errorUpdateCount:f.errorUpdateCount,isFetched:f.dataUpdateCount>0||f.errorUpdateCount>0,isFetchedAfterMount:f.dataUpdateCount>y.dataUpdateCount||f.errorUpdateCount>y.errorUpdateCount,isFetching:O,isRefetching:O&&!Q,isLoadingError:T&&0===f.dataUpdatedAt,isPaused:"paused"===_,isPlaceholderData:E,isPreviousData:g,isRefetchError:T&&0!==f.dataUpdatedAt,isStale:h(e,t),refetch:this.refetch,remove:this.remove}}updateResult(e){const t=this.currentResult,r=this.createResult(this.currentQuery,this.options);if(this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,(0,s.shallowEqualObjects)(r,t))return;this.currentResult=r;const n={cache:!0};!1!==(null==e?void 0:e.listeners)&&(()=>{if(!t)return!0;const{notifyOnChangeProps:e}=this.options;if("all"===e||!e&&!this.trackedProps.size)return!0;const r=new Set(null!=e?e:this.trackedProps);return this.options.useErrorBoundary&&r.add("error"),Object.keys(this.currentResult).some((e=>{const s=e;return this.currentResult[s]!==t[s]&&r.has(s)}))})()&&(n.listeners=!0),this.notify({...n,...e})}updateQuery(){const e=this.client.getQueryCache().build(this.client,this.options);if(e===this.currentQuery)return;const t=this.currentQuery;this.currentQuery=e,this.currentQueryInitialState=e.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==t||t.removeObserver(this),e.addObserver(this))}onQueryUpdate(e){const t={};"success"===e.type?t.onSuccess=!e.manual:"error"!==e.type||(0,u.isCancelledError)(e.error)||(t.onError=!0),this.updateResult(t),this.hasListeners()&&this.updateTimers()}notify(e){n.notifyManager.batch((()=>{var t,r,s,n;if(e.onSuccess)null==(t=(r=this.options).onSuccess)||t.call(r,this.currentResult.data),null==(s=(n=this.options).onSettled)||s.call(n,this.currentResult.data,null);else if(e.onError){var i,o,u,a;null==(i=(o=this.options).onError)||i.call(o,this.currentResult.error),null==(u=(a=this.options).onSettled)||u.call(a,void 0,this.currentResult.error)}e.listeners&&this.listeners.forEach((e=>{e(this.currentResult)})),e.cache&&this.client.getQueryCache().notify({query:this.currentQuery,type:"observerResultsUpdated"})}))}}function l(e,t){return function(e,t){return!(!1===t.enabled||e.state.dataUpdatedAt||"error"===e.state.status&&!1===t.retryOnMount)}(e,t)||e.state.dataUpdatedAt>0&&c(e,t,t.refetchOnMount)}function c(e,t,r){if(!1!==t.enabled){const s="function"==typeof r?r(e):r;return"always"===s||!1!==s&&h(e,t)}return!1}function d(e,t,r,s){return!1!==r.enabled&&(e!==t||!1===s.enabled)&&(!r.suspense||"error"!==e.state.status)&&h(e,r)}function h(e,t){return e.isStaleByTime(t.staleTime)}},"./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs":(e,t,r)=>{r.r(t),r.d(t,{QueryErrorResetBoundary:()=>u,useQueryErrorResetBoundary:()=>o});var s=r("./node_modules/react/index.js");function n(){let e=!1;return{clearReset:()=>{e=!1},reset:()=>{e=!0},isReset:()=>e}}const i=s.createContext(n()),o=()=>s.useContext(i),u=({children:e})=>{const[t]=s.useState((()=>n()));return s.createElement(i.Provider,{value:t},"function"==typeof e?e(t):e)}},"./node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs":(e,t,r)=>{r.r(t),r.d(t,{ensurePreventErrorBoundaryRetry:()=>i,getHasError:()=>u,useClearResetErrorBoundary:()=>o});var s=r("./node_modules/react/index.js"),n=r("./node_modules/@tanstack/react-query/build/lib/utils.mjs");const i=(e,t)=>{(e.suspense||e.useErrorBoundary)&&(t.isReset()||(e.retryOnMount=!1))},o=e=>{s.useEffect((()=>{e.clearReset()}),[e])},u=({result:e,errorResetBoundary:t,useErrorBoundary:r,query:s})=>e.isError&&!t.isReset()&&!e.isFetching&&(0,n.shouldThrowError)(r,[e.error,s])},"./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs":(e,t,r)=>{r.r(t),r.d(t,{IsRestoringProvider:()=>o,useIsRestoring:()=>i});var s=r("./node_modules/react/index.js");const n=s.createContext(!1),i=()=>s.useContext(n),o=n.Provider},"./node_modules/@tanstack/react-query/build/lib/suspense.mjs":(e,t,r)=>{r.r(t),r.d(t,{ensureStaleTime:()=>s,fetchOptimistic:()=>o,shouldSuspend:()=>i,willFetch:()=>n});const s=e=>{e.suspense&&"number"!=typeof e.staleTime&&(e.staleTime=1e3)},n=(e,t)=>e.isLoading&&e.isFetching&&!t,i=(e,t,r)=>(null==e?void 0:e.suspense)&&n(t,r),o=(e,t,r)=>t.fetchOptimistic(e).then((({data:t})=>{null==e.onSuccess||e.onSuccess(t),null==e.onSettled||e.onSettled(t,null)})).catch((t=>{r.clearReset(),null==e.onError||e.onError(t),null==e.onSettled||e.onSettled(void 0,t)}))},"./node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs":(e,t,r)=>{r.r(t),r.d(t,{useBaseQuery:()=>d});var s=r("./node_modules/react/index.js"),n=r("./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs"),i=r("./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs"),o=r("./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs"),u=r("./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs"),a=r("./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs"),l=r("./node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs"),c=r("./node_modules/@tanstack/react-query/build/lib/suspense.mjs");function d(e,t){const r=(0,u.useQueryClient)({context:e.context}),d=(0,a.useIsRestoring)(),h=(0,o.useQueryErrorResetBoundary)(),y=r.defaultQueryOptions(e);y._optimisticResults=d?"isRestoring":"optimistic",y.onError&&(y.onError=i.notifyManager.batchCalls(y.onError)),y.onSuccess&&(y.onSuccess=i.notifyManager.batchCalls(y.onSuccess)),y.onSettled&&(y.onSettled=i.notifyManager.batchCalls(y.onSettled)),(0,c.ensureStaleTime)(y),(0,l.ensurePreventErrorBoundaryRetry)(y,h),(0,l.useClearResetErrorBoundary)(h);const[p]=s.useState((()=>new t(r,y))),f=p.getOptimisticResult(y);if((0,n.useSyncExternalStore)(s.useCallback((e=>d?()=>{}:p.subscribe(i.notifyManager.batchCalls(e))),[p,d]),(()=>p.getCurrentResult()),(()=>p.getCurrentResult())),s.useEffect((()=>{p.setOptions(y,{listeners:!1})}),[y,p]),(0,c.shouldSuspend)(y,f,d))throw(0,c.fetchOptimistic)(y,p,h);if((0,l.getHasError)({result:f,errorResetBoundary:h,useErrorBoundary:y.useErrorBoundary,query:p.getCurrentQuery()}))throw f.error;return y.notifyOnChangeProps?f:p.trackResult(f)}},"./node_modules/@tanstack/react-query/build/lib/useQuery.mjs":(e,t,r)=>{r.r(t),r.d(t,{useQuery:()=>o});var s=r("./node_modules/@tanstack/query-core/build/lib/utils.mjs"),n=r("./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs"),i=r("./node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs");function o(e,t,r){const o=(0,s.parseQueryArgs)(e,t,r);return(0,i.useBaseQuery)(o,n.QueryObserver)}},"./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs":(e,t,r)=>{r.r(t),r.d(t,{useSyncExternalStore:()=>s});const s=r("./node_modules/use-sync-external-store/shim/index.js").useSyncExternalStore},"./node_modules/@tanstack/react-query/build/lib/utils.mjs":(e,t,r)=>{function s(e,t){return"function"==typeof e?e(...t):!!e}r.r(t),r.d(t,{shouldThrowError:()=>s})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,